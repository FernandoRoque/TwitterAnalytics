?datasets
library(help = "datasets")
is.na(CO2)
is.na(AirPassengers)
is.na(CO2)
is.na(Nile)
is.na(airquality)
head(airquality)
knitr::opts_chunk$set(echo = TRUE)
lapply(airquality, is.na())
lapply(airquality, is.na)
sum(is.na(airquality)) # sum missing values in airquality
knitr::opts_chunk$set(echo = TRUE)
colnames(airquality)[colSums(is.na(airquality)) > 0]
lapply(airquality, class)
imputeMean <- function(x) {
if (class(x) == "numeric")
{
replace(x, is.na(x), mean(x, na.rm = TRUE))
}
}
ariquality_impute <- lapply(airquality, imputeMean)
sum(is.na(airquality_impute))
sum(is.na(ariquality_impute))
airquality_impute <- lapply(airquality, imputeMean)
lapply(airquality, class)
imputeMean <- function(x) {
if (class(x) == "numeric" | class(x) == "integer")
{
replace(x, is.na(x), mean(x, na.rm = TRUE))
}
}
airquality_impute <- lapply(airquality, imputeMean)
head(airquality_impute)
sum(is.na(airquality_impute))
class(airquality_impute)
as.data.frame(airquality_impute)
airquality_impute <- lapply(airquality, imputeMean)
airquality_impute <- as.data.frame(airquality_impute)
head(airquality_impute)
sum(is.na(airquality_impute))
head(airquality_impute)
knitr::opts_chunk$set(echo = TRUE)
#ggplot(iris)
head(iris)
#ggplot(iris)
ggplot(iris, aes(x = Species)) + geom_bar()
library(ggplot)
library(ggplot2)
ggplot(iris, aes(x = Species)) + geom_bar()
head(iris)
tally(iris$Specieis)
tally(iris$Species)
library(mosaic)
install.packages("mosaic")
library(mosaic)
tally(iris$Species)
head(mtcars)
tally(mtcars$carb)
tally(mtcars$gear)
?mtcars
head(mtcars)
ggplot(mtcars, aes(x = gear)) + geom_bar()
ggplot(mtcars, aes(x = gear)) + geom_bar() + theme_bw()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
has_devel()
devtools::install_github("hadley/devtools")
?has_devel
has_compiler()
install.packages("pkgbuild")
install.packages("pkgbuild")
library(devtools)
?has_devel
install.packages("devtools")
install.packages("devtools")
devtools::install_github("hadley/devtools")
devtools::install_github("hadley/devtools")
remotes::install_github("r-lib/remotes")
devtools::install_github("hadley/devtools")
source("https://install-github.me/mangothecat/callr")
devtools::install_github("hadley/devtools")
?has_devel
library(devtools)
has_devel
has_devel()
?has_devel()
install.packages("rtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(roxygen2)
library(testthat)
library(knitr)
url <- "https://gist.github.com/raw/4506250/devtools.zip"
temp <- file.path(tempdir(), "devtools.zip")
setInternet2(TRUE)
suppressWarnings(download.file(url, temp, mode = "wb"))
install.packages(temp, repos = NULL)
file.remove(temp)
?has_devel
has_devel()
devtools::install_github("hadley/devtools")
source("https://install-github.me/mangothecat/callr")
devtools::install_github("hadley/devtools")
remotes::install_github("r-lib/remotes")
r(function() var(iris[, 1:4]))
source("https://install-github.me/r-lib/callr")
library(callr)
r(function() var(iris[, 1:4]))
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
?has_devel()
has_compiler()
has_devel()
library(devtools)
has_devel()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
?has_devel
?has_devel
?devtools
library(rcall)
library(callr)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
has_devel()
?devtools
library(MASS)
head(biopsy)
?biopsy
class(biopsy$V1)
class(biopsy$V4)
80-16
75-16
library(shiny); runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
?actionButton
runApp('Desktop/PackageTestR.R')
?actionButton
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
?actionButton
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
data.frame("No conflicts")
dat <- data.frame("No conflicts")
colnames(dat) <- ""
dat
runApp('Desktop/PackageTestR.R')
data <- data.frame("No package conflicts")
colnames(data) <- ""
data
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
url <- paste("https://rdocumentation.org/api/packages/", "dplyr", "/versions/", "0.7.3", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
packages1 <- data.frame(dat$topics$name)
url2 <- paste("https://rdocumentation.org/api/packages/", "plyr", "/versions/", "1.8.4", sep = "")
dat2 <- fromJSON(txt = url2)
packages2 <- data.frame(dat2$topics$name)
inter <- intersect(packages1$dat.topics.name, packages2$dat2.topics.name)
inter
inter <- data.frame(inter)
inter
colnames(inter) <- "Function Conflicts"
inter
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
inter <- data.frame("No function conflicts")
colnames(inter) <- "Conflicts"
inter
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
dat$topics$title
data_package1 <- cbind(packages1, title1)
title1 <- data.frame(dat$topics$title)
data_package1 <- cbind(packages1, title1)
data_package1
inter <- intersect(packages1$dat.topics.name, packages2$dat2.topics.name)
inter <- data.frame(inter)
inter
inter %>% inner_join(data_package1)
library(dplyr)
inter %>% inner_join(data_package1)
names(inter)
colnames(inter) <- "dat.topics.name"
inter %>% inner_join(data_package1)
inter %>% inner_join(data_package1)
head(inter)
inter2 <- inter %>% inner_join(data_package1)
inter2
head(data_packages2)
packages2 <- data.frame(dat2$topics$name)
title2 <- data.frame(dat2$topics$title)
data_package2 <- cbind(packages2, title2)
head(data_packages2)
head(data_package2)
data_package2 %>% plyr::rename(replace = c("dat2.topics.name" = "dat.topics.name"))
data_packages2 <- data_package2 %>% plyr::rename(replace = c("dat2.topics.name" = "dat.topics.name"))
inter2 %>% inner_join(data_packages2)
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
data_package2 <- data_package2 %>% plyr::rename(replace = c("dat2.topics.name" = "dat.topics.name"))
head(data_package2)
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
url <- paste("https://rdocumentation.org/api/packages/", "plyr", "/versions/", "0.1.1", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
packages2 <- data.frame(dat$topics$name, dat$topics$title)
packages2
runApp('Desktop/PackageTestR.R')
dat
is.null(dat$topics$num)
data.frame(dat$topics)
table <- data.frame(dat$topics)
colnames(table) <- c("No functions in this version of the package")
table <- data.frame("No functions in this version of the package")
colnames(table) <- c("Functions")
table
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
url <- paste("https://rdocumentation.org/api/packages/", "dplyr", "/versions/", "0.7.3", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
dat
is.null(dat$topics$num)
dat$topics$num
dat$topics$title
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
?updateSelectInput
runApp('Desktop/packageTestCopy.R')
url <- paste("https://rdocumentation.org/api/packages/", "dplyr", "/versions/", "0.7.3", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
dat
dat$dependencies
dat$version
dat$title
dat$description
dat$release_date
dat$maintainer
runApp('Desktop/packageTestCopy.R')
dat$package_name, dat$version, dat$title, dat$description, dat$release_date, dat$topics
dat$topics$name
dat$package$name
dat$package$star_count
dat$package$stars
dat$package$versions
cbind(dat$package_name, dat$version, dat$title, dat$description, dat$release_date, dat$maintainer$name, dat$maintainer$email)
data.frame(dat$package_name, dat$version, dat$title, dat$description, dat$release_date, dat$maintainer$name, dat$maintainer$email)
t(data.frame(dat$package_name, dat$version, dat$title, dat$description,
dat$release_date, dat$maintainer$name, dat$maintainer$email))
metrics <- data.frame(dat$package_name, dat$version, dat$title, dat$description,
dat$release_date, dat$maintainer$name, dat$maintainer$email)
metrics
colnames(metrics) <- c("Name", "Version", "Title", "Description", "Release Date", "Maintainer", "Contact")
t(metrics)
dat$created_at
dat$collaborators
dat$pageTitle
dat$package$latest_version_id
dat$package$star_count
dat$package$star_count
dat$package$stars$package_name
dat$package$upvoted
dat$license
dat$copyright
metrics <- data.frame(dat$package_name, dat$version, dat$title, dat$description,
dat$release_date, dat$license, dat$maintainer$name, dat$maintainer$email)
colnames(metrics) <- c("Name", "Version", "Title", "Description", "Release Date", "License", "Maintainer", "Contact")
t(metrics)
dat$fromCache
dat$type
dat$vignettes
dat$canonicalLink
dat$maintainer
metrics_data <- t(metrics)
colnames(metrics_data) <- "Package Metrics"
metrics_data
runApp('Desktop/packageTestCopy.R')
url <- paste("https://rdocumentation.org/api/packages/", "plyr", "/versions/", "0.1.1", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
dat$package_name
dat$version
dat$title
nrow(metrics_data)
metrica_data
metrics_data
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
metrics_data
library(survival)
?pbc
data(ovarian)
?ovarian
fit <- survfit(Surv(time, status) ~ sex, data = lung)
plot(fit)
print(fit)
fit <- survfit(Surv(time, status==2) ~ sex, data = lung)
print(fit)
fit <- survfit(Surv(time, status==1) ~ sex, data = lung)
print(fit)
levels(lung$status)
class(lung$status)
?pbs
attach(veteran)
?veteran
fit <- survfit(Surv(time, status==2) ~ sex, data = lung)
plot(fit)
fit <- survfit(Surv(time, status==1) ~ sex, data = lung)
plot(fit)
data(leukemia)
surv.aml <- survfit(Surv(time,status)~1)
class(leukemia$status)
unique(leukemia$status)
?leukemia
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
library(data.table)
head(metrics_data)
dat <- setDT(metrics_data, keep.rownames = TRUE)[]
class(metrics_data)
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
dat <- setDT(data.frame(metrics_data), keep.rownames = TRUE)[]
dat
View(dat)
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
library(shiny); runApp('Desktop/packageTestCopy.R')
setwd("~/Desktop/git-style/TwitterAnalytics")
runApp()
library(Shiny)
library(Shiny)
library(shiny)
runApp()
runApp()
runApp()
?searchTwitter
setwd("~/Desktop/git-style/TwitterAnalytics")
rsconnect::setAccountInfo(name='aj17',
token='EF03F03D918BBCB4F19F17F4E2841988',
secret='jQazX+PazO+eiJRN5vcucn87uaheWz24CTBYaUEa')
library(shiny)
setwd("~/Desktop/git-style/TwitterAnalytics")
deployApp()
library(shinyapps)
deployApp()
library(shiny)
library(rsconnect)
deployApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
